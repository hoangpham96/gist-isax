CREATE EXTENSION gist_isax;
/*
 * GUC parameters
 */
-- Default value of 0.5 should be reachable via SHOW
SHOW gist_isax.distance_threshold;
 gist_isax.distance_threshold 
------------------------------
 0.5
(1 row)

-- Shouldn't be able to set negative distances
SET gist_isax.distance_threshold TO -0.1;
ERROR:  -0.1 is outside the valid range for parameter "gist_isax.distance_threshold" (0 .. 1.79769e+308)
SHOW gist_isax.distance_threshold;
 gist_isax.distance_threshold 
------------------------------
 0.5
(1 row)

-- Should be able to set threshold and see the updated value
SET gist_isax.distance_threshold TO 0.1;
SHOW gist_isax.distance_threshold;
 gist_isax.distance_threshold 
------------------------------
 0.1
(1 row)

/*
 * array_dist function
 */
-- Don't allow comparisons between arrays of different lengths
SELECT array_dist('{1.0,1.0,1.0,1.0}'::real[], '{2.0,2.0,2.0}'::real[]);
ERROR:  arrays must be same length
DETAIL:  Arrays with lengths 4 and 3 are not compatible for distance measurement.
SELECT array_dist('{1.0,1.0,1.0}'::real[], '{2.0,2.0,2.0,2.0}'::real[]);
ERROR:  arrays must be same length
DETAIL:  Arrays with lengths 3 and 4 are not compatible for distance measurement.
-- Comparisons involving NULLs should give result unknown
SELECT array_dist('{null,1.0,1.0,1.0}'::real[], '{2.0,2.0,2.0,2.0}'::real[]);
 array_dist 
------------
           
(1 row)

SELECT array_dist(null::real[], '{2.0,2.0,2.0,2.0}'::real[]);
 array_dist 
------------
           
(1 row)

SELECT array_dist('{1.0,1.0,1.0}'::real[], '{null,2.0,2.0,2.0}'::real[]);
 array_dist 
------------
           
(1 row)

SELECT array_dist('{1.0,1.0,1.0}'::real[], null::real[]);
 array_dist 
------------
           
(1 row)

-- sqrt((1 - 1)^2 + (1 - 1)^2 + (1 - 1)^2 + (1 - 1)^2) = 0.0
SELECT array_dist('{1.0,1.0,1.0,1.0}'::real[], '{1.0,1.0,1.0,1.0}'::real[]);
 array_dist 
------------
          0
(1 row)

-- sqrt((1 - 2)^2 + (1 - 2)^2 + (1 - 2)^2 + (1 - 2)^2) = 2.0
SELECT array_dist('{1.0,1.0,1.0,1.0}'::real[], '{2.0,2.0,2.0,2.0}'::real[]);
 array_dist 
------------
          2
(1 row)

-- distances should be symmetric
SELECT array_dist('{2.0,2.0,2.0,2.0}'::real[], '{1.0,1.0,1.0,1.0}'::real[]);
 array_dist 
------------
          2
(1 row)

-- Trivial distance 0.1
SELECT array_dist('{0,0,0}'::real[], '{0,0,0.1}'::real[]);
 array_dist 
------------
        0.1
(1 row)

SELECT array_dist('{0,0,0.1}'::real[], '{0,0,0}'::real[]);
 array_dist 
------------
        0.1
(1 row)

/*
 * arrays_similar function
 */
SET gist_isax.distance_threshold TO 0.2;
-- Comparisons involving NULLs should give result unknown
SELECT arrays_similar('{null,1.0,1.0,1.0}'::real[], '{2.0,2.0,2.0,2.0}'::real[]);
 arrays_similar 
----------------
 
(1 row)

SELECT arrays_similar(null::real[], '{2.0,2.0,2.0,2.0}'::real[]);
 arrays_similar 
----------------
 
(1 row)

SELECT arrays_similar('{1.0,1.0,1.0,1.0}'::real[], '{null,2.0,2.0,2.0}'::real[]);
 arrays_similar 
----------------
 
(1 row)

SELECT arrays_similar('{1.0,1.0,1.0,1.0}'::real[], null::real[]);
 arrays_similar 
----------------
 
(1 row)

-- sqrt((1 - 2)^2 + (1 - 2)^2 + (1 - 2)^2 + (1 - 2)^2) = 2.0
SELECT arrays_similar('{2.0,2.0,2.0,2.0}'::real[], '{1.0,1.0,1.0,1.0}'::real[]);
 arrays_similar 
----------------
 f
(1 row)

-- Trivial distance 0.1
SELECT arrays_similar('{0,0,0}'::real[], '{0,0,0.1}'::real[]);
 arrays_similar 
----------------
 t
(1 row)

SELECT arrays_similar('{0,0,0.1}'::real[], '{0,0,0}'::real[]);
 arrays_similar 
----------------
 t
(1 row)

/*
 * '%' array similarity operator
 */
SET gist_isax.distance_threshold TO 0.2;
-- Comparisons involving NULLs should give result unknown
SELECT '{null,1.0,1.0,1.0}'::real[] % '{2.0,2.0,2.0,2.0}'::real[];
 ?column? 
----------
 
(1 row)

SELECT null::real[] % '{2.0,2.0,2.0,2.0}'::real[];
 ?column? 
----------
 
(1 row)

SELECT '{1.0,1.0,1.0,1.0}'::real[] % '{null,2.0,2.0,2.0}'::real[];
 ?column? 
----------
 
(1 row)

SELECT '{1.0,1.0,1.0,1.0}'::real[] % null::real[];
 ?column? 
----------
 
(1 row)

-- sqrt((1 - 2)^2 + (1 - 2)^2 + (1 - 2)^2 + (1 - 2)^2) = 2.0
SELECT '{2.0,2.0,2.0,2.0}'::real[] % '{1.0,1.0,1.0,1.0}'::real[];
 ?column? 
----------
 f
(1 row)

-- Trivial distance 0.1
SELECT '{0,0,0}'::real[] % '{0,0,0.1}'::real[];
 ?column? 
----------
 t
(1 row)

SELECT '{0,0,0.1}'::real[] % '{0,0,0}'::real[];
 ?column? 
----------
 t
(1 row)

--Testing calc_lower_bp
SELECT calc_lower_bp(1,256);
 calc_lower_bp 
---------------
      -2.66007
(1 row)

SELECT calc_lower_bp(255,256);
 calc_lower_bp 
---------------
       2.66007
(1 row)

SELECT calc_lower_bp(2,128);
 calc_lower_bp 
---------------
      -2.15387
(1 row)

--Testing calc_lower_bp
SELECT calc_upper_bp(1,256);
 calc_upper_bp 
---------------
      -2.41756
(1 row)

SELECT calc_upper_bp(255,256);
 calc_upper_bp 
---------------
           100
(1 row)

SELECT calc_upper_bp(2,128);
 calc_upper_bp 
---------------
      -1.98743
(1 row)

--Copy ECG5000 data to table test_ecg
CREATE TABLE test_ecg(id SERIAL PRIMARY KEY, signal real[]);
\copy test_ecg(signal) from 'data/ECG5000_TRAIN.data'
--Testing ts_to_paa
SELECT ts_to_paa(signal) FROM test_ecg WHERE id = 1;
                                                             ts_to_paa                                                              
------------------------------------------------------------------------------------------------------------------------------------
 {-2.46421,-0.387701,-0.477982,-0.655634,-0.176266,0.183238,0.470216,0.63229,0.445298,0.397698,1.69353,0.129489,-0.288913,0.498932}
(1 row)

--Create table for PAA representation of the signals
CREATE TABLE test_ecg_paa(id SERIAL PRIMARY KEY, signal_paa real[]);
INSERT INTO test_ecg_paa(signal_paa) SELECT ts_to_paa(signal) FROM test_ecg;
--Testing paa_to_isax
SELECT paa_to_isax(signal_paa) FROM test_ecg_paa WHERE id =1 ;
                                                 paa_to_isax                                                 
-------------------------------------------------------------------------------------------------------------
 {1:256,89:256,80:256,65:256,110:256,146:256,174:256,188:256,172:256,167:256,244:256,141:256,98:256,176:256}
(1 row)

--Testing isax
CREATE TABLE isax_test(id SERIAL PRIMARY KEY, signal_isax isax);
-- INSERT INTO isax_test(signal_isax) values (cast((SELECT paa_to_isax(signal_paa) FROM test_ecg_paa) as cstring));
INSERT INTO isax_test(signal_isax) VALUES ('{1:256,89:256,80:256,65:256,110:256,146:256,174:256,188:256,172:256,167:256,244:256,141:256,98:256,176:256}');
SELECT * FROM isax_test;
 id |                                                 signal_isax                                                 
----+-------------------------------------------------------------------------------------------------------------
  1 | {1:256,89:256,80:256,65:256,110:256,146:256,174:256,188:256,172:256,167:256,244:256,141:256,98:256,176:256}
(1 row)

-- Testing same
SELECT same('{1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256}','{1:128,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256}');
 same 
------
 f
(1 row)

SELECT same('{1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256}','{1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256}');
 same 
------
 t
(1 row)

--Testing penalty_implementation. Should be -(14 * 128) = -1792
SELECT penalty_implementation('{1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256,1:256}','{1:128,1:128,1:128,1:128,1:128,1:128,1:128,1:128,1:128,1:128,1:128,1:128,1:128,1:128}');
 penalty_implementation 
------------------------
                  -1792
(1 row)

--Testing union_implementation. Should be arrays of 127:128 and 63:64
SELECT union_implementation('{254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256}','{255:256,255:256,255:256,255:256,255:256,255:256,255:256,255:256,255:256,255:256,255:256,255:256,255:256,255:256}');
                                               union_implementation                                                
-------------------------------------------------------------------------------------------------------------------
 {127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128}
(1 row)

SELECT union_implementation('{254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256}','{127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128}');
                                               union_implementation                                                
-------------------------------------------------------------------------------------------------------------------
 {127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128,127:128}
(1 row)

SELECT union_implementation('{254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256,254:256}','{126:128,126:128,126:128,126:128,126:128,126:128,126:128,126:128,126:128,126:128,126:128,126:128,126:128,126:128}');
                                 union_implementation                                  
---------------------------------------------------------------------------------------
 {63:64,63:64,63:64,63:64,63:64,63:64,63:64,63:64,63:64,63:64,63:64,63:64,63:64,63:64}
(1 row)

--Testing mindist. Should be 0 and sqrt(140/14)
SELECT mindist('{1:256,89:256,80:256,65:256,110:256,146:256,174:256,188:256,172:256,167:256,244:256,141:256,98:256,176:256}','{-2.46421,-0.387701,-0.477982,-0.655634,-0.176266,0.183238,0.470216,0.63229,0.445298,0.397698,1.69353,0.129489,-0.288913,0.498932}'::real[]);
 mindist 
---------
       0
(1 row)

SELECT mindist('{1:256,89:256,80:256,65:256,110:256,146:256,174:256,188:256,172:256,167:256,244:256,141:256,98:256,176:256}','{-3.66006747,-0.387701,-0.477982,-0.655634,-0.176266,0.183238,0.470216,0.63229,0.445298,0.397698,1.69353,0.129489,-0.288913,0.498932}'::real[]);
 mindist 
---------
 3.16228
(1 row)

